package com.qst.francis.impl;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import javax.swing.text.StyledEditorKit.BoldAction;

import com.qst.francis.dao.InfoDao;
import com.qst.francis.pojo.Info;
import com.qst.francis.util.JDBCConnection;

public class InfoDaoImpl implements InfoDao{
	private JDBCConnection jdbcconnection = new JDBCConnection();
	private ResultSet resultSet = null;
	private PreparedStatement preparedStatement = null;
	private String tb_name = "sd_info";
	
	//发布信息
	@Override
	public boolean insertInfo(Info info) {
		boolean flag = false;
		String sqlString = String.format("insert into %s (INFO_TYPE_ID, INFO_TITLE, INFO_USER_ID, INFO_LINKMAN, INFO_PHONE, "
							+ "INFO_EMAIL, INFO_DATE, INFO_CONTENT) values (?, ?, ?, ?, ?, ?, ?, ?)",
								tb_name);
		try {
			preparedStatement = jdbcconnection.createConnection().prepareStatement(sqlString);
			preparedStatement.setInt(1, info.getInfo_type_id());
			preparedStatement.setString(2, info.getInfo_title());
			preparedStatement.setInt(3, info.getInfo_user_id());
			preparedStatement.setString(4, info.getInfo_linkman());
			preparedStatement.setString(5, info.getInfo_phone());
			preparedStatement.setString(6, info.getInfo_email());
			preparedStatement.setTimestamp(7, (Timestamp) info.getInfo_date());
			preparedStatement.setString(8, info.getInfo_content());
			if(preparedStatement.executeUpdate() > 0){
				flag = true;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("info insert failed");
			e.printStackTrace();
		}
		finally{
			jdbcconnection.closeConnection(null, preparedStatement);
		}
		return flag;
	}

	@Override
	public Info queryById(String id) {
		Info info = null;
		boolean flag = false;
		int info_id = Integer.parseInt(id);
		//INFO_PAY_STATE 0  未付费;
		String sqlString = String.format("select * from %s where INFO_ID=? and INFO_STATE=0", 
						tb_name);
		try {
			preparedStatement = jdbcconnection.createConnection().prepareStatement(sqlString);
			preparedStatement.setInt(1, info_id);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()){
				info = new Info();
				info.setInfo_id(resultSet.getInt("INFO_ID"));
				info.setInfo_type_id(resultSet.getInt("INFO_TYPE_ID"));
				info.setInfo_title(resultSet.getString("INFO_TITLE"));
				info.setInfo_user_id(resultSet.getInt("INFO_USER_ID"));
				info.setInfo_phone(resultSet.getString("INFO_PHONE"));
				info.setInfo_email(resultSet.getString("INFO_EMAIL"));
				info.setInfo_date(resultSet.getTimestamp("INFO_DATE"));
				info.setInfo_check_state(resultSet.getInt("INFO_CHECK_STATE"));
				info.setInfo_pay_state(resultSet.getInt("INFO_PAY_STATE"));
				info.setInfo_state(resultSet.getInt("INFO_STATE"));
				info.setInfo_content(resultSet.getString("INFO_CONTENT"));
				info.setInfo_linkman(resultSet.getString("INFO_LINKMAN"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("info query by id failed");
			e.printStackTrace();
		}
		finally{
			jdbcconnection.closeConnection(resultSet, preparedStatement);
		}
		
		return info;
	}

	//query by state info_type
	@Override
	public List<Info> queryByState(String pay_state, String check_state, String info_type, int start, int step) {
		List<Info> list = null;
		int allcnt = 0;
		
		String sqlString = String.format("select * from %s where INFO_STATE=0 ",
							tb_name);

		if(pay_state != null && !pay_state.equals("") && !pay_state.equals("-1")){
			sqlString += " and INFO_PAY_STATE=" + pay_state;
		}
		if(check_state != null && !check_state.equals("") && !check_state.equals("-1")){
			sqlString += " and INFO_CHECK_STATE=" + check_state;
		}
		if(info_type != null && !info_type.equals("") && !info_type.equals("0")){
			sqlString += " and INFO_TYPE_ID=" + info_type;
		}
		
		sqlString += " limit " + start + "," + step;
		try {
			preparedStatement = jdbcconnection.createConnection().prepareStatement(sqlString);
			resultSet = preparedStatement.executeQuery();
			list = new ArrayList<Info>();
			Info info = null;
			while(resultSet.next()){
				info = new Info();
				info.setInfo_id(resultSet.getInt("INFO_ID"));
				info.setInfo_type_id(resultSet.getInt("INFO_TYPE_ID"));
				info.setInfo_title(resultSet.getString("INFO_TITLE"));
				info.setInfo_user_id(resultSet.getInt("INFO_USER_ID"));
				info.setInfo_phone(resultSet.getString("INFO_PHONE"));
				info.setInfo_email(resultSet.getString("INFO_EMAIL"));
				info.setInfo_date(resultSet.getTimestamp("INFO_DATE"));
				info.setInfo_check_state(resultSet.getInt("INFO_CHECK_STATE"));
				info.setInfo_pay_state(resultSet.getInt("INFO_PAY_STATE"));
				info.setInfo_state(resultSet.getInt("INFO_STATE"));
				info.setInfo_content(resultSet.getString("INFO_CONTENT"));
				info.setInfo_linkman(resultSet.getString("INFO_LINKMAN"));
				list.add(info);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("info query by state failed");
			e.printStackTrace();
		}
		finally{
			jdbcconnection.closeConnection(resultSet, preparedStatement);
		}
		return list;
	}

	//only count number
	@Override
	public int queryCnt(String pay_state, String check_state, String info_type) {
		int allcnt = 0;
		
		String sqlcntString = String.format("select count(*) from %s where INFO_STATE=0 ",
							tb_name);
		
		if(pay_state != null && !pay_state.equals("") && !pay_state.equals("-1")){
			sqlcntString += " and INFO_PAY_STATE=" + pay_state;
		}
		if(check_state != null && !check_state.equals("") && !check_state.equals("-1")){
			sqlcntString += " and INFO_CHECK_STATE=" + check_state;
		}
		if(info_type != null && !info_type.equals("") && !info_type.equals("0")){
			sqlcntString += " and INFO_TYPE_ID=" + info_type;
		}
		try {
			preparedStatement = jdbcconnection.createConnection().prepareStatement(sqlcntString);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()){
				allcnt = resultSet.getInt(1);
			}
		} catch (SQLException e1) {
			System.out.println("info state cnt failed");
			e1.printStackTrace();
		}
		finally{
			jdbcconnection.closeConnection(resultSet, preparedStatement);
		}
		return allcnt;
	}

	@Override
	public boolean checkInfo(String id) {
		boolean flag = false;
		
		int type_id = Integer.parseInt(id);
		String sqlString = String.format("update %s set INFO_CHECK_STATE=1 where INFO_ID=? and INFO_STATE=0",
							tb_name);
		try {
			preparedStatement = jdbcconnection.createConnection().prepareStatement(sqlString);
			preparedStatement.setInt(1, type_id);
			if(preparedStatement.executeUpdate() > 0){
				flag = true;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("info check failed");
			e.printStackTrace();
		}
		finally{
			jdbcconnection.closeConnection(null, preparedStatement);
		}
		return flag;
	}

	@Override
	public boolean payInfo(String id) {
		boolean flag = false;
		int info_id = Integer.parseInt(id);
		String sqlString = String.format("update %s set INFO_PAY_STATE=1 where INFO_ID=? and INFO_STATE=0", 
						tb_name);
		try {
			preparedStatement = jdbcconnection.createConnection().prepareStatement(sqlString);
			preparedStatement.setInt(1, info_id);
			if(preparedStatement.executeUpdate() > 0){
				flag = true;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("info pay failed");
			e.printStackTrace();
		}
		finally{
			jdbcconnection.closeConnection(null, preparedStatement);
		}
		return flag;
	}

	@Override
	public boolean deleteById(String id) {
		boolean flag = false;
		int info_id = Integer.parseInt(id);
		String sqlString = String.format("update %s set INFO_STATE=1 where INFO_ID=?",
						tb_name);
		
		try {
			preparedStatement = jdbcconnection.createConnection().prepareStatement(sqlString);
			preparedStatement.setInt(1, info_id);
			if(preparedStatement.executeUpdate() > 0){
				flag = true;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("info delete failed");
			e.printStackTrace();
		}
		finally{
			jdbcconnection.closeConnection(null, preparedStatement);
		}
		return flag;
	}

	@Override
	public Info queryFreeByTypeId(String info_type_id) {
		Info info = null;
		String sqlString = String.format("select * from %s where INFO_STATE=0 and INFO_CHECK_STATE=1 and "
											+ "INFO_PAY_STATE=0 and INFO_TYPE_ID=" + info_type_id + " order by INFO_DATE desc",
								tb_name);
		try {
			preparedStatement = jdbcconnection.createConnection().prepareStatement(sqlString);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()){
				info = new Info();
				info.setInfo_id(resultSet.getInt("INFO_ID"));
				info.setInfo_type_id(resultSet.getInt("INFO_TYPE_ID"));
				info.setInfo_title(resultSet.getString("INFO_TITLE"));
				info.setInfo_user_id(resultSet.getInt("INFO_USER_ID"));
				info.setInfo_phone(resultSet.getString("INFO_PHONE"));
				info.setInfo_email(resultSet.getString("INFO_EMAIL"));
				info.setInfo_date(resultSet.getTimestamp("INFO_DATE"));
				info.setInfo_check_state(resultSet.getInt("INFO_CHECK_STATE"));
				info.setInfo_pay_state(resultSet.getInt("INFO_PAY_STATE"));
				info.setInfo_state(resultSet.getInt("INFO_STATE"));
				info.setInfo_content(resultSet.getString("INFO_CONTENT"));
				info.setInfo_linkman(resultSet.getString("INFO_LINKMAN"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("info free query id failed");
			e.printStackTrace();
		}
		finally{
			jdbcconnection.closeConnection(resultSet, preparedStatement);
		}
		return info;
	}

	@Override
	public Info queryPayByTypeId(String info_type_id) {
		Info info = null;
		String sqlString = String.format("select * from %s where INFO_STATE=0 and INFO_CHECK_STATE=1 and "
											+ "INFO_PAY_STATE=1 and INFO_TYPE_ID=" + info_type_id + " order by INFO_DATE desc",
								tb_name);

		try {
			preparedStatement = jdbcconnection.createConnection().prepareStatement(sqlString);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()){
				info = new Info();
				info.setInfo_id(resultSet.getInt("INFO_ID"));
				info.setInfo_type_id(resultSet.getInt("INFO_TYPE_ID"));
				info.setInfo_title(resultSet.getString("INFO_TITLE"));
				info.setInfo_user_id(resultSet.getInt("INFO_USER_ID"));
				info.setInfo_phone(resultSet.getString("INFO_PHONE"));
				info.setInfo_email(resultSet.getString("INFO_EMAIL"));
				info.setInfo_date(resultSet.getTimestamp("INFO_DATE"));
				info.setInfo_check_state(resultSet.getInt("INFO_CHECK_STATE"));
				info.setInfo_pay_state(resultSet.getInt("INFO_PAY_STATE"));
				info.setInfo_state(resultSet.getInt("INFO_STATE"));
				info.setInfo_content(resultSet.getString("INFO_CONTENT"));
				info.setInfo_linkman(resultSet.getString("INFO_LINKMAN"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("info pay query id failed");
			e.printStackTrace();
		}
		finally{
			jdbcconnection.closeConnection(resultSet, preparedStatement);
		}
		return info;
	}

	@Override
	public List<Info> queryByCondition(String coninput, String condition, String matchType, int start, int step) {
		List<Info> list = null;
		int all_cnt = 0;
		
		//inner join
		String sqlString = String.format("from %s info, %s infoType "
							+ "where info.INFO_TYPE_ID=infoType.INFO_TYPE_ID and INFO_STATE=0 and " + condition,
						tb_name, "sd_info_type");
		if(matchType.equals("matchSome")){
			sqlString += " like '%" + coninput + "%'";
		}
		if(matchType.equals("matchAll")){
			sqlString += "='" + coninput + "'";
		}
		
		String cntSqlString = "select count(*) " + sqlString;

		try {
			preparedStatement = jdbcconnection.createConnection().prepareStatement(cntSqlString);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()){
				all_cnt = resultSet.getInt(1);
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			System.out.println("info query condition count failed");
			e1.printStackTrace();
		}
		
		start = (all_cnt - start * step) > 0 ? start : start - 1;
		if(start < 0){
			start = 0;
		}
		
		sqlString = "select info.*, infoType.INFO_TYPE_NAME " + sqlString + " limit " + start + "," + step;
		try {
			preparedStatement = jdbcconnection.getConnection().prepareStatement(sqlString);
			resultSet = preparedStatement.executeQuery();
			list = new ArrayList<Info>();
			Info info = null;
			while(resultSet.next()){
				info = new Info();
				info = new Info();
				info.setInfo_id(resultSet.getInt("INFO_ID"));
				info.setInfo_type_id(resultSet.getInt("INFO_TYPE_ID"));
				info.setInfo_title(resultSet.getString("INFO_TITLE"));
				info.setInfo_user_id(resultSet.getInt("INFO_USER_ID"));
				info.setInfo_phone(resultSet.getString("INFO_PHONE"));
				info.setInfo_email(resultSet.getString("INFO_EMAIL"));
				info.setInfo_date(resultSet.getTimestamp("INFO_DATE"));
				info.setInfo_check_state(resultSet.getInt("INFO_CHECK_STATE"));
				info.setInfo_pay_state(resultSet.getInt("INFO_PAY_STATE"));
				info.setInfo_state(resultSet.getInt("INFO_STATE"));
				info.setInfo_content(resultSet.getString("INFO_CONTENT"));
				info.setInfo_linkman(resultSet.getString("INFO_LINKMAN"));
				info.setInfo_type_name(resultSet.getString("INFO_TYPE_NAME"));
				list.add(info);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("info query condition failed");
			e.printStackTrace();
		}
		finally{
			jdbcconnection.closeConnection(resultSet, preparedStatement);
		}
		
		return list;
	}
}
